{"ast":null,"code":"import{CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED}from\"./constants\";export var setSearchField=function setSearchField(text){return{type:CHANGE_SEARCH_FIELD,payload:text};};export var requestRobots=function requestRobots(dispatch){dispatch({type:REQUEST_ROBOTS_PENDING});fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(data){return dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data});}).catch(function(err){return dispatch({type:REQUEST_ROBOTS_FAILED,payload:err});});};","map":{"version":3,"sources":["/Users/TGAP/Desktop/Stuff/RoboFriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","err"],"mappings":"AAAA,OACIA,mBADJ,CAEIC,sBAFJ,CAGIC,sBAHJ,CAIIC,qBAJJ,KAKO,aALP,CAOA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,IAAI,QAAK,CACnCC,IAAI,CAAEN,mBAD6B,CAEnCO,OAAO,CAAEF,IAF0B,CAAL,EAA3B,CAKP,MAAO,IAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,QAAD,CAAc,CACvCA,QAAQ,CAAC,CAACH,IAAI,CAAEL,sBAAP,CAAD,CAAR,CACAS,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACM,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADd,EAECF,IAFD,CAEM,SAAAG,IAAI,QAAIL,CAAAA,QAAQ,CAAC,CAACH,IAAI,CAAEJ,sBAAP,CAA+BK,OAAO,CAAEO,IAAxC,CAAD,CAAZ,EAFV,EAGCC,KAHD,CAGO,SAAAC,GAAG,QAAIP,CAAAA,QAAQ,CAAC,CAACH,IAAI,CAAEH,qBAAP,CAA8BI,OAAO,CAAES,GAAvC,CAAD,CAAZ,EAHV,EAIH,CANM","sourcesContent":["import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\n}"]},"metadata":{},"sourceType":"module"}