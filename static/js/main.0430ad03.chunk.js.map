{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","toLowerCase","startsWith","slice","sort","a","b","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","padding","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0430ad03.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    robots.map((user, i) => {\n        if (robots[i].name.toLowerCase().startsWith('mr. ') || robots[i].name.toLowerCase().startsWith('ms. ')) {\n            robots[i].name = robots[i].name.slice(4);\n        } else if (robots[i].name.toLowerCase().startsWith('mrs. ')) {\n            robots[i].name = robots[i].name.slice(5);\n        }\n        return robots;\n    });\n\n    return (\n        <div className='tc'>\n            {\n                robots.sort((a,b) => a.name > b.name ? 1 : -1)\n                .map((user, i) => (\n                    <Card\n                    key={i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='tc pa2 ma4'>\n            <input \n                className='tc pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search Robots'    \n                onChange={searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '2px solid white', padding: '30px', height: '71vh'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport {setSearchField, requestRobots} from '../actions';\n\nconst mapStateToProps = state => ({\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => requestRobots(dispatch)\n})\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const{searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending ?\n            <h1 className='tc'>Loading...</h1> :\n            <div className='tc'>\n                <h1 className='tc f1'>RoboFriends</h1>\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <CardList robots={filteredRobots}/>\n                </Scroll>\n            </div>     \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport {searchRobots, requestRobots} from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/> \n    </Provider>, document.getElementById('root'));\n"],"sourceRoot":""}